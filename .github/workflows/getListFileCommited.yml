# This is a basic workflow to help you get started with Actions

name: CI-List-File

# Controls when the workflow will run
on:
  push:
    branches:
      - development
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
        
  changed-files:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v22.2

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed" 
            echo $file | rev
            echo "::notice file=$file,line=1,col=5,endColumn=7::Missing semicolon"
            IN=$(echo $file | rev)
            mails=$(echo $IN | tr "." "\n")
            for addr in $mails
            do
                echo "> [$addr]"
                echo [$addr] | rev
            done
          done
          
      - name: List files Name
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed" 
            IN=$(echo $file | rev)
            mails=$(echo $IN | tr "/" "\n")
            echo "${mails[0]} file name"
            echo "${mails[1]} path name"
            echo "${mails[2]} extensio"
          done          
          
      - name: File Name v1
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            file=$(echo $file | rev)
            fileName="$(echo $file | cut -d'/' -f1 | rev)"
            fileType="$(echo $fileName | cut -d'.' -f2)"
            echo "------------------------------------------"
            echo "Nome do Arquivo $fileName"
            echo "Tipo do Arquivo $fileType"
            echo "------------------------------------------"
          done         

      - name: Open File
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            grep types1:Description $file  | grep -v '<?xml' | grep '<types1:Description>'  | head -n 2 | awk 'NR==1 {print $1}' | cut -d'>' -f 2
            grep -w '<types1:Description/>' $file
            if [ -z grep -w '<types1:Description/>' $file ]
            then
                  echo "\$1 is empty"
            else
                  echo "\$1 is NOT empty"
            fi
          done             